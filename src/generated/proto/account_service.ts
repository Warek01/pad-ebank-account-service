// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v3.12.4
// source: account_service.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Currency } from "./currency";

export const protobufPackage = "account_service";

export enum AuthStatus {
  SUCCESS = 0,
  USER_ALREADY_EXISTS = 1,
  USER_NOT_FOUND = 3,
  INVALID_CREDENTIALS = 2,
  UNRECOGNIZED = -1,
}

export interface LoginCredentials {
  email: string;
  password: string;
}

export interface AuthCredentials {
  email: string;
  fullName: string;
  authStatus: AuthStatus;
}

export interface RegisterCredentials {
  email: string;
  password: string;
  fullName: string;
}

export interface GetProfileOptions {
  email: string;
}

export interface Profile {
  email: string;
  fullName: string;
}

export interface AddCurrencyOptions {
  currency: Currency;
  amount: number;
}

export interface AddCurrencyResult {
  success: boolean;
}

export interface TransactionData {
  currency: Currency;
  amount: number;
  email: string;
}

export interface CanPerformTransactionResult {
  canPerform: boolean;
}

export interface ChangeCurrencyOptions {
  currency: Currency;
}

export interface ChangeCurrencyResult {
  success: boolean;
}

export interface CardIdentifier {
  cardCode: string;
}

export interface BlockCardResult {
  success: boolean;
}

export interface UnblockCardResult {
  success: boolean;
}

export const ACCOUNT_SERVICE_PACKAGE_NAME = "account_service";

export interface AccountServiceClient {
  login(request: LoginCredentials, metadata?: Metadata): Observable<AuthCredentials>;

  register(request: RegisterCredentials, metadata?: Metadata): Observable<AuthCredentials>;

  getProfile(request: GetProfileOptions, metadata?: Metadata): Observable<Profile>;

  addCurrency(request: AddCurrencyOptions, metadata?: Metadata): Observable<AddCurrencyResult>;

  canPerformTransaction(request: TransactionData, metadata?: Metadata): Observable<CanPerformTransactionResult>;

  changeCurrency(request: ChangeCurrencyOptions, metadata?: Metadata): Observable<ChangeCurrencyResult>;

  blockCard(request: CardIdentifier, metadata?: Metadata): Observable<BlockCardResult>;

  unblockCard(request: CardIdentifier, metadata?: Metadata): Observable<UnblockCardResult>;
}

export interface AccountServiceController {
  login(
    request: LoginCredentials,
    metadata?: Metadata,
  ): Promise<AuthCredentials> | Observable<AuthCredentials> | AuthCredentials;

  register(
    request: RegisterCredentials,
    metadata?: Metadata,
  ): Promise<AuthCredentials> | Observable<AuthCredentials> | AuthCredentials;

  getProfile(request: GetProfileOptions, metadata?: Metadata): Promise<Profile> | Observable<Profile> | Profile;

  addCurrency(
    request: AddCurrencyOptions,
    metadata?: Metadata,
  ): Promise<AddCurrencyResult> | Observable<AddCurrencyResult> | AddCurrencyResult;

  canPerformTransaction(
    request: TransactionData,
    metadata?: Metadata,
  ): Promise<CanPerformTransactionResult> | Observable<CanPerformTransactionResult> | CanPerformTransactionResult;

  changeCurrency(
    request: ChangeCurrencyOptions,
    metadata?: Metadata,
  ): Promise<ChangeCurrencyResult> | Observable<ChangeCurrencyResult> | ChangeCurrencyResult;

  blockCard(
    request: CardIdentifier,
    metadata?: Metadata,
  ): Promise<BlockCardResult> | Observable<BlockCardResult> | BlockCardResult;

  unblockCard(
    request: CardIdentifier,
    metadata?: Metadata,
  ): Promise<UnblockCardResult> | Observable<UnblockCardResult> | UnblockCardResult;
}

export function AccountServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "login",
      "register",
      "getProfile",
      "addCurrency",
      "canPerformTransaction",
      "changeCurrency",
      "blockCard",
      "unblockCard",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AccountService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AccountService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ACCOUNT_SERVICE_NAME = "AccountService";
